# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'layout.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_mainWindow(object):
    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(834, 553)
        mainWindow.setIconSize(QtCore.QSize(26, 26))
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.textEdit = QtWidgets.QTextEdit(self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit.sizePolicy().hasHeightForWidth())
        self.textEdit.setSizePolicy(sizePolicy)
        self.textEdit.setObjectName("textEdit")
        self.webEngineView = QtWebEngineWidgets.QWebEngineView(self.splitter)
        self.webEngineView.setUrl(QtCore.QUrl("about:blank"))
        self.webEngineView.setObjectName("webEngineView")
        self.verticalLayout.addWidget(self.splitter)
        mainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(mainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 834, 22))
        self.menubar.setObjectName("menubar")
        self.menu_File = QtWidgets.QMenu(self.menubar)
        self.menu_File.setObjectName("menu_File")
        self.menuExport_to = QtWidgets.QMenu(self.menu_File)
        self.menuExport_to.setObjectName("menuExport_to")
        self.menuStyle = QtWidgets.QMenu(self.menubar)
        self.menuStyle.setObjectName("menuStyle")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuInsert = QtWidgets.QMenu(self.menubar)
        self.menuInsert.setObjectName("menuInsert")
        mainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setSizeGripEnabled(False)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)
        self.actionNew = QtWidgets.QAction(mainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionOpen = QtWidgets.QAction(mainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(mainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionQuit = QtWidgets.QAction(mainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.actionHTML_plain = QtWidgets.QAction(mainWindow)
        self.actionHTML_plain.setObjectName("actionHTML_plain")
        self.actionHTML_styled = QtWidgets.QAction(mainWindow)
        self.actionHTML_styled.setObjectName("actionHTML_styled")
        self.actionJSON = QtWidgets.QAction(mainWindow)
        self.actionJSON.setObjectName("actionJSON")
        self.actionGitHub_source_code = QtWidgets.QAction(mainWindow)
        self.actionGitHub_source_code.setObjectName("actionGitHub_source_code")
        self.actionMarkdown_Tutorial = QtWidgets.QAction(mainWindow)
        self.actionMarkdown_Tutorial.setObjectName("actionMarkdown_Tutorial")
        self.actionAbout_JAME = QtWidgets.QAction(mainWindow)
        self.actionAbout_JAME.setObjectName("actionAbout_JAME")
        self.actionSave_as = QtWidgets.QAction(mainWindow)
        self.actionSave_as.setObjectName("actionSave_as")
        self.actionNone_default = QtWidgets.QAction(mainWindow)
        self.actionNone_default.setObjectName("actionNone_default")
        self.actionGitHub = QtWidgets.QAction(mainWindow)
        self.actionGitHub.setObjectName("actionGitHub")
        self.actionFoghorn = QtWidgets.QAction(mainWindow)
        self.actionFoghorn.setObjectName("actionFoghorn")
        self.actionBold = QtWidgets.QAction(mainWindow)
        self.actionBold.setObjectName("actionBold")
        self.actionItalic = QtWidgets.QAction(mainWindow)
        self.actionItalic.setObjectName("actionItalic")
        self.actionBullet_list = QtWidgets.QAction(mainWindow)
        self.actionBullet_list.setObjectName("actionBullet_list")
        self.actionOrdered_list = QtWidgets.QAction(mainWindow)
        self.actionOrdered_list.setObjectName("actionOrdered_list")
        self.actionBlock_quote = QtWidgets.QAction(mainWindow)
        self.actionBlock_quote.setObjectName("actionBlock_quote")
        self.actionCode_block = QtWidgets.QAction(mainWindow)
        self.actionCode_block.setObjectName("actionCode_block")
        self.actionHeading_Lvl_1 = QtWidgets.QAction(mainWindow)
        self.actionHeading_Lvl_1.setObjectName("actionHeading_Lvl_1")
        self.actionHeading_Lvl_2 = QtWidgets.QAction(mainWindow)
        self.actionHeading_Lvl_2.setObjectName("actionHeading_Lvl_2")
        self.actionHeading_Lvl_3 = QtWidgets.QAction(mainWindow)
        self.actionHeading_Lvl_3.setObjectName("actionHeading_Lvl_3")
        self.menuExport_to.addAction(self.actionHTML_plain)
        self.menuExport_to.addAction(self.actionHTML_styled)
        self.menuExport_to.addSeparator()
        self.menuExport_to.addAction(self.actionJSON)
        self.menu_File.addAction(self.actionNew)
        self.menu_File.addAction(self.actionOpen)
        self.menu_File.addSeparator()
        self.menu_File.addAction(self.actionSave)
        self.menu_File.addAction(self.actionSave_as)
        self.menu_File.addSeparator()
        self.menu_File.addAction(self.menuExport_to.menuAction())
        self.menu_File.addSeparator()
        self.menu_File.addAction(self.actionQuit)
        self.menuStyle.addAction(self.actionNone_default)
        self.menuStyle.addAction(self.actionGitHub)
        self.menuStyle.addAction(self.actionFoghorn)
        self.menuHelp.addAction(self.actionGitHub_source_code)
        self.menuHelp.addAction(self.actionMarkdown_Tutorial)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionAbout_JAME)
        self.menuInsert.addAction(self.actionBold)
        self.menuInsert.addAction(self.actionItalic)
        self.menuInsert.addSeparator()
        self.menuInsert.addAction(self.actionBullet_list)
        self.menuInsert.addAction(self.actionOrdered_list)
        self.menuInsert.addSeparator()
        self.menuInsert.addAction(self.actionBlock_quote)
        self.menuInsert.addAction(self.actionCode_block)
        self.menuInsert.addSeparator()
        self.menuInsert.addAction(self.actionHeading_Lvl_1)
        self.menuInsert.addAction(self.actionHeading_Lvl_2)
        self.menuInsert.addAction(self.actionHeading_Lvl_3)
        self.menubar.addAction(self.menu_File.menuAction())
        self.menubar.addAction(self.menuInsert.menuAction())
        self.menubar.addAction(self.menuStyle.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "JAME: just another Markdown editor"))
        self.menu_File.setTitle(_translate("mainWindow", "File"))
        self.menuExport_to.setTitle(_translate("mainWindow", "Export to..."))
        self.menuStyle.setTitle(_translate("mainWindow", "Style"))
        self.menuHelp.setTitle(_translate("mainWindow", "Help"))
        self.menuInsert.setTitle(_translate("mainWindow", "Insert"))
        self.actionNew.setText(_translate("mainWindow", "New"))
        self.actionNew.setToolTip(_translate("mainWindow", "Create a new file"))
        self.actionNew.setShortcut(_translate("mainWindow", "Ctrl+N"))
        self.actionOpen.setText(_translate("mainWindow", "Open"))
        self.actionOpen.setToolTip(_translate("mainWindow", "Open an existing file"))
        self.actionOpen.setShortcut(_translate("mainWindow", "Ctrl+O"))
        self.actionSave.setText(_translate("mainWindow", "Save"))
        self.actionSave.setToolTip(_translate("mainWindow", "Save your work"))
        self.actionSave.setShortcut(_translate("mainWindow", "Ctrl+S"))
        self.actionQuit.setText(_translate("mainWindow", "Quit"))
        self.actionQuit.setToolTip(_translate("mainWindow", "Quit to desktop"))
        self.actionQuit.setShortcut(_translate("mainWindow", "Ctrl+Q"))
        self.actionHTML_plain.setText(_translate("mainWindow", "HTML (plain)"))
        self.actionHTML_plain.setToolTip(_translate("mainWindow", "HTML without the CSS"))
        self.actionHTML_styled.setText(_translate("mainWindow", "HTML (styled)"))
        self.actionHTML_styled.setToolTip(_translate("mainWindow", "HTML with the selected CSS"))
        self.actionJSON.setText(_translate("mainWindow", "JSON"))
        self.actionJSON.setToolTip(_translate("mainWindow", "JSON representation of the abstract syntax tree"))
        self.actionGitHub_source_code.setText(_translate("mainWindow", "GitHub"))
        self.actionGitHub_source_code.setToolTip(_translate("mainWindow", "View the GitHub page of this project"))
        self.actionMarkdown_Tutorial.setText(_translate("mainWindow", "Markdown Tutorial"))
        self.actionMarkdown_Tutorial.setToolTip(_translate("mainWindow", "Get a tutorial on what Markdown is & how it works"))
        self.actionAbout_JAME.setText(_translate("mainWindow", "About JAME"))
        self.actionAbout_JAME.setToolTip(_translate("mainWindow", "If you really want to know about this mess... fine..."))
        self.actionSave_as.setText(_translate("mainWindow", "Save as"))
        self.actionSave_as.setToolTip(_translate("mainWindow", "Save as..."))
        self.actionSave_as.setShortcut(_translate("mainWindow", "Ctrl+Shift+S"))
        self.actionNone_default.setText(_translate("mainWindow", "None (default)"))
        self.actionGitHub.setText(_translate("mainWindow", "GitHub"))
        self.actionFoghorn.setText(_translate("mainWindow", "Foghorn"))
        self.actionBold.setText(_translate("mainWindow", "Bold"))
        self.actionBold.setShortcut(_translate("mainWindow", "Ctrl+B"))
        self.actionItalic.setText(_translate("mainWindow", "Italic"))
        self.actionItalic.setShortcut(_translate("mainWindow", "Ctrl+I"))
        self.actionBullet_list.setText(_translate("mainWindow", "Bullet list"))
        self.actionOrdered_list.setText(_translate("mainWindow", "Ordered list"))
        self.actionBlock_quote.setText(_translate("mainWindow", "Block quote"))
        self.actionCode_block.setText(_translate("mainWindow", "Code block"))
        self.actionHeading_Lvl_1.setText(_translate("mainWindow", "Heading (Lvl. 1)"))
        self.actionHeading_Lvl_1.setShortcut(_translate("mainWindow", "Ctrl+1"))
        self.actionHeading_Lvl_2.setText(_translate("mainWindow", "Heading (Lvl. 2)"))
        self.actionHeading_Lvl_2.setShortcut(_translate("mainWindow", "Ctrl+2"))
        self.actionHeading_Lvl_3.setText(_translate("mainWindow", "Heading (Lvl. 3)"))
        self.actionHeading_Lvl_3.setShortcut(_translate("mainWindow", "Ctrl+3"))
from PyQt5 import QtWebEngineWidgets
